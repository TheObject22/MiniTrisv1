#BlueJ class context
comment0.params=
comment0.target=void\ clearField()
comment0.text=\r\n\ clearField\r\n\r\n\ Creates\ a\ new\ playing\ field\ sets\ all\ cells\ in\ the\ field\ to\ EMPTY.\r\n\r\n
comment1.params=row\ col
comment1.target=void\ rotate(int,\ int)
comment1.text=\r\n\ rotate\r\n\r\n\ This\ method\ rotates\ a\ 2x2\ block\ by\ 90\ degrees.\ \r\n\ It\ does\ not\ check\ that\ the\ rotation\ is\ valid.\ \ \r\n\r\n\ @param\ row\ the\ row\ of\ the\ upper-left\ corner\ of\ the\ 2x2\ block\r\n\ @param\ col\ the\ column\ of\ the\ upper-left\ block\r\n\r\n
comment10.params=e
comment10.target=void\ keyPressed(java.awt.event.KeyEvent)
comment10.text=\r\n\ keyPressed\r\n\r\n\ when\ the\ user\ presses\ a\ key,\ this\ method\ examines\ it\ to\ see\r\n\ if\ the\ key\ is\ one\ that\ the\ program\ responds\ to\ and\ then\ calls\ the\r\n\ appropriate\ method.\r\n
comment11.params=e
comment11.target=void\ keyReleased(java.awt.event.KeyEvent)
comment12.params=e
comment12.target=void\ keyTyped(java.awt.event.KeyEvent)
comment13.params=args
comment13.target=void\ main(java.lang.String[])
comment13.text=\r\n\ This\ method\ creates\ a\ window\ frame\ and\ displays\ the\ Mintris\r\n\ game\ inside\ of\ it.\ \ \r\n
comment14.params=e
comment14.target=void\ windowClosing(java.awt.event.WindowEvent)
comment2.params=rowFrom\ colFrom\ rowTo\ colTo
comment2.target=void\ moveFaceBlock(int,\ int,\ int,\ int)
comment2.text=\r\n\ moveFaceBlock\r\n\r\n\ Move\ face\ block\ (if\ filled)\ from\ one\ position\ to\ another\ depending\ on\ parameters\ set.\r\n\ Don't\ move\ if\ empty.\r\n\ \r\n\ @param\ rowFrom\ the\ row\ of\ the\ upper-left\ corner\ of\ the\ block\ before\r\n\ @param\ colFrom\ the\ column\ of\ the\ upper-left\ corner\ of\ the\ block\ before\r\n\ @param\ rowTo\ the\ row\ of\ the\ upper-left\ corner\ of\ the\ block\ after\r\n\ @param\ colTo\ the\ column\ of\ the\ upper-left\ corner\ of\ the\ block\ after\r\n
comment3.params=row\ col\ direction
comment3.target=void\ move(int,\ int,\ int)
comment3.text=\r\n\ move\r\n\r\n\ This\ method\ moves\ a\ 2x2\ piece\ by\ one\ space\ (left,\ right,\ or\ down)\r\n\ This\ method\ does\ *not*\ check\ to\ make\ sure\ that\ the\ movement\ is\ valid;\ \r\n\ it\ is\ up\ to\ the\ caller\ to\ verify\ the\ move\ before\ calling\ move.\r\n\r\n\ The\ block\ is\ moved\ as\ would\ be\ expected\ for\ a\ Tetris\ game.\r\n\ Specifically,\ if\ an\ empty\ space\ moves\ onto\ a\ block,\ then\ the\ block\ remains\r\n\ and\ is\ not\ replaced\ by\ the\ empty\ space.\r\n\r\n\ @param\ row\ the\ row\ of\ the\ upper-left\ corner\ of\ the\ block\r\n\ @param\ col\ the\ column\ of\ the\ upper-left\ corner\ of\ the\ block\r\n\ @param\ direction\ the\ direction\ to\ move\ (LEFT,\ DOWN,\ or\ RIGHT)\r\n\ \ \ \ \ \ \ \ (see\ the\ constants\ defined\ at\ the\ top\ of\ this\ class)\r\n\r\n
comment4.params=row\ col\ direction
comment4.target=boolean\ validMove(int,\ int,\ int)
comment4.text=\r\n\ validMove\r\n\r\n\ This\ method\ calculates\ whether\ a\ block\ may\ be\ moved\ one\ space\ in\ a\ particular\r\n\ direction\:\ left,\ right\ or\ down.\ \ A\ move\ is\ invalid\ if\ there\ is\ another\ block\ in\r\n\ the\ target\ location,\ or\ if\ the\ movement\ would\ take\ the\ block\ off\ of\ the\r\n\ playing\ field\r\n\r\n\ @param\ row\ the\ row\ of\ the\ upper-left\ corner\ of\ the\ block\r\n\ @param\ col\ the\ column\ of\ the\ upper-left\ corner\ of\ the\ block\ \r\n\ @param\ direction\ direction\ to\ move\ (LEFT,\ RIGHT,\ or\ DOWN)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ (see\ the\ constants\ defined\ at\ the\ top\ of\ this\ class)\r\n\r\n\ @return\ \ \ \ true\ if\ the\ movement\ is\ legal\ and\ false\ otherwise\r\n\ \r\n\ known\ weakness\:\ assumes\ that\ given\ initial\ position\ is\ valid\r\n
comment5.params=row
comment5.target=boolean\ checkRow(int)
comment5.text=\r\n\ checkRow\r\n\r\n\ If\ the\ row\ (given\ by\ parameter\ row)\ has\ all\ columns\ filled\ then\ return\ true.\r\n\ @param\ row\ the\ row\ to\ be\ checked\r\n
comment6.params=
comment6.target=void\ removeRows()
comment6.text=\r\n\ removeRows\r\n\r\n\ This\ method\ searches\ the\ field\ for\ any\ complete\ rows\ of\ blocks\ and\r\n\ removes\ them.\ \ Rows\ above\ the\ removed\ show\ shift\ down\ one\ row.\r\n\ The\ score\ is\ incremented\ for\ each\ complete\ row\ that\ is\ removed.\r\n
comment7.params=
comment7.target=void\ createRandomPiece()
comment7.text=\r\n\ createRandomPiece\r\n\r\n\ creates\ a\ new\ piece\ at\ the\ top\ of\ the\ Mintris\ board\r\n\r\n
comment8.params=g\ x\ y\ blockColor
comment8.target=void\ drawBlock(java.awt.Graphics,\ int,\ int,\ java.awt.Color)
comment8.text=\r\n\ drawBlock\r\n\r\n\ a\ helper\ method\ for\ {@link\ paint}.\ \ This\ method\ draws\ a\ Mintris\ block\ of\ a\r\n\ given\ color\ at\ a\ given\ x,y\ coordinate.\r\n\r\n\ @param\ \ g\ \ \ \ \ \ \ \ \ \ the\ Graphics\ object\ for\ this\ application\r\n\ @param\ \ x,\ y\ \ \ \ \ \ \ the\ coordinates\ of\ the\ block\r\n\ @param\ \ blockColor\ the\ main\ color\ of\ the\ block\r\n
comment9.params=g
comment9.target=void\ paint(java.awt.Graphics)
comment9.text=\r\n\ paint\r\n\r\n\ This\ methods\ draws\ the\ current\ state\ of\ the\ game\ on\ a\ given\ canvas.\ \ The\r\n\ field\ occupies\ the\ bottom\ left\ corner.\ \ A\ title\ is\ at\ the\ top\ and\ the\r\n\ current\ score\ is\ shown\ at\ right.\r\n\ \r\n\ @param\ \ g\ \ \ the\ Graphics\ object\ for\ this\ application\r\n
numComments=15
